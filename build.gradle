buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
	   classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT' 
		//'net.minecraftforge.gradle:ForgeGradle:1.2+'
    }
}

apply plugin: 'forge' 

group = "codechicken"  
archivesBaseName = "CodeChickenCore"

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

dependencies 
{
	compile  files('libs/CodeChickenLib-1.7.10-1.1.3-dev.jar')
    //compile "codechicken:CodeChickenLib:${config.mc_version}-${config.ccl_version}:dev"
}

version =  "${project.config.mod_version}"

println  config.mc_version + "-" + config.forge_version

// Setup the forge minecraft plugin data. Specify the preferred forge/minecraft version here
minecraft 
{
    version = config.mc_version + "-" + config.forge_version
	replace '${mod_version}', project.config.mod_version
}

sourceSets 
{
    main 
	{
        def root = project.projectDir.parentFile
        java {
            srcDir new File(root, "src")
        }
        resources {
            srcDir new File(root, "resources")
        }
    }
}

processResources
{
    //redo task if any of these properties change
    inputs.property "version", project.version
    inputs.property "mc_version", config.mc_version
    inputs.property "ccl_version", config.ccl_version

    // Replace properties in info files
    from(sourceSets.main.resources.srcDirs) 
	{
        include '*.info'
        expand 'version':project.version,'mc_version':config.mc_version,'ccl_version':config.ccl_version
    }
    // Copy everything else
    from(sourceSets.main.resources.srcDirs) 
	{
        include 'assets/**/*.*'
    }
}

version = "${project.minecraft.version}-${project.version}"
def commonManifest =
{
    attributes 'FMLCorePlugin': 'codechicken.core.launch.CodeChickenCorePlugin'
}


jar {
    classifier = 'universal'
    manifest commonManifest
}
task sourceJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'src'
}
task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    manifest commonManifest
}


// Tell the artifact system about our extra jars
artifacts 
{
    archives sourceJar, devJar
}
 
uploadArchives {
    dependsOn 'reobf'
}